// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v1/page_management.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PageManagementService_CreatePage_FullMethodName        = "/api.v1.PageManagementService/CreatePage"
	PageManagementService_ReadPage_FullMethodName          = "/api.v1.PageManagementService/ReadPage"
	PageManagementService_RenderPage_FullMethodName        = "/api.v1.PageManagementService/RenderPage"
	PageManagementService_UpdatePage_FullMethodName        = "/api.v1.PageManagementService/UpdatePage"
	PageManagementService_UpdatePageContent_FullMethodName = "/api.v1.PageManagementService/UpdatePageContent"
	PageManagementService_UpdateWholePage_FullMethodName   = "/api.v1.PageManagementService/UpdateWholePage"
	PageManagementService_DeletePage_FullMethodName        = "/api.v1.PageManagementService/DeletePage"
	PageManagementService_TogglePageLock_FullMethodName    = "/api.v1.PageManagementService/TogglePageLock"
)

// PageManagementServiceClient is the client API for PageManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageManagementServiceClient interface {
	CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error)
	ReadPage(ctx context.Context, in *ReadPageRequest, opts ...grpc.CallOption) (*ReadPageResponse, error)
	RenderPage(ctx context.Context, in *RenderPageRequest, opts ...grpc.CallOption) (*RenderPageResponse, error)
	UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*UpdatePageResponse, error)
	UpdatePageContent(ctx context.Context, in *UpdatePageContentRequest, opts ...grpc.CallOption) (*UpdatePageContentResponse, error)
	UpdateWholePage(ctx context.Context, in *UpdateWholePageRequest, opts ...grpc.CallOption) (*UpdateWholePageResponse, error)
	DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*DeletePageResponse, error)
	TogglePageLock(ctx context.Context, in *TogglePageLockRequest, opts ...grpc.CallOption) (*TogglePageLockResponse, error)
}

type pageManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPageManagementServiceClient(cc grpc.ClientConnInterface) PageManagementServiceClient {
	return &pageManagementServiceClient{cc}
}

func (c *pageManagementServiceClient) CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePageResponse)
	err := c.cc.Invoke(ctx, PageManagementService_CreatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagementServiceClient) ReadPage(ctx context.Context, in *ReadPageRequest, opts ...grpc.CallOption) (*ReadPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadPageResponse)
	err := c.cc.Invoke(ctx, PageManagementService_ReadPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagementServiceClient) RenderPage(ctx context.Context, in *RenderPageRequest, opts ...grpc.CallOption) (*RenderPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenderPageResponse)
	err := c.cc.Invoke(ctx, PageManagementService_RenderPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagementServiceClient) UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*UpdatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePageResponse)
	err := c.cc.Invoke(ctx, PageManagementService_UpdatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagementServiceClient) UpdatePageContent(ctx context.Context, in *UpdatePageContentRequest, opts ...grpc.CallOption) (*UpdatePageContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePageContentResponse)
	err := c.cc.Invoke(ctx, PageManagementService_UpdatePageContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagementServiceClient) UpdateWholePage(ctx context.Context, in *UpdateWholePageRequest, opts ...grpc.CallOption) (*UpdateWholePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWholePageResponse)
	err := c.cc.Invoke(ctx, PageManagementService_UpdateWholePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagementServiceClient) DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*DeletePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePageResponse)
	err := c.cc.Invoke(ctx, PageManagementService_DeletePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageManagementServiceClient) TogglePageLock(ctx context.Context, in *TogglePageLockRequest, opts ...grpc.CallOption) (*TogglePageLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TogglePageLockResponse)
	err := c.cc.Invoke(ctx, PageManagementService_TogglePageLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageManagementServiceServer is the server API for PageManagementService service.
// All implementations must embed UnimplementedPageManagementServiceServer
// for forward compatibility
type PageManagementServiceServer interface {
	CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error)
	ReadPage(context.Context, *ReadPageRequest) (*ReadPageResponse, error)
	RenderPage(context.Context, *RenderPageRequest) (*RenderPageResponse, error)
	UpdatePage(context.Context, *UpdatePageRequest) (*UpdatePageResponse, error)
	UpdatePageContent(context.Context, *UpdatePageContentRequest) (*UpdatePageContentResponse, error)
	UpdateWholePage(context.Context, *UpdateWholePageRequest) (*UpdateWholePageResponse, error)
	DeletePage(context.Context, *DeletePageRequest) (*DeletePageResponse, error)
	TogglePageLock(context.Context, *TogglePageLockRequest) (*TogglePageLockResponse, error)
	mustEmbedUnimplementedPageManagementServiceServer()
}

// UnimplementedPageManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPageManagementServiceServer struct {
}

func (UnimplementedPageManagementServiceServer) CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedPageManagementServiceServer) ReadPage(context.Context, *ReadPageRequest) (*ReadPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPage not implemented")
}
func (UnimplementedPageManagementServiceServer) RenderPage(context.Context, *RenderPageRequest) (*RenderPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderPage not implemented")
}
func (UnimplementedPageManagementServiceServer) UpdatePage(context.Context, *UpdatePageRequest) (*UpdatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (UnimplementedPageManagementServiceServer) UpdatePageContent(context.Context, *UpdatePageContentRequest) (*UpdatePageContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePageContent not implemented")
}
func (UnimplementedPageManagementServiceServer) UpdateWholePage(context.Context, *UpdateWholePageRequest) (*UpdateWholePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWholePage not implemented")
}
func (UnimplementedPageManagementServiceServer) DeletePage(context.Context, *DeletePageRequest) (*DeletePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedPageManagementServiceServer) TogglePageLock(context.Context, *TogglePageLockRequest) (*TogglePageLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TogglePageLock not implemented")
}
func (UnimplementedPageManagementServiceServer) mustEmbedUnimplementedPageManagementServiceServer() {}

// UnsafePageManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageManagementServiceServer will
// result in compilation errors.
type UnsafePageManagementServiceServer interface {
	mustEmbedUnimplementedPageManagementServiceServer()
}

func RegisterPageManagementServiceServer(s grpc.ServiceRegistrar, srv PageManagementServiceServer) {
	s.RegisterService(&PageManagementService_ServiceDesc, srv)
}

func _PageManagementService_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagementServiceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageManagementService_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagementServiceServer).CreatePage(ctx, req.(*CreatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManagementService_ReadPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagementServiceServer).ReadPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageManagementService_ReadPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagementServiceServer).ReadPage(ctx, req.(*ReadPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManagementService_RenderPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagementServiceServer).RenderPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageManagementService_RenderPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagementServiceServer).RenderPage(ctx, req.(*RenderPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManagementService_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagementServiceServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageManagementService_UpdatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagementServiceServer).UpdatePage(ctx, req.(*UpdatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManagementService_UpdatePageContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePageContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagementServiceServer).UpdatePageContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageManagementService_UpdatePageContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagementServiceServer).UpdatePageContent(ctx, req.(*UpdatePageContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManagementService_UpdateWholePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWholePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagementServiceServer).UpdateWholePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageManagementService_UpdateWholePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagementServiceServer).UpdateWholePage(ctx, req.(*UpdateWholePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManagementService_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagementServiceServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageManagementService_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagementServiceServer).DeletePage(ctx, req.(*DeletePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageManagementService_TogglePageLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TogglePageLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageManagementServiceServer).TogglePageLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageManagementService_TogglePageLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageManagementServiceServer).TogglePageLock(ctx, req.(*TogglePageLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PageManagementService_ServiceDesc is the grpc.ServiceDesc for PageManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.PageManagementService",
	HandlerType: (*PageManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePage",
			Handler:    _PageManagementService_CreatePage_Handler,
		},
		{
			MethodName: "ReadPage",
			Handler:    _PageManagementService_ReadPage_Handler,
		},
		{
			MethodName: "RenderPage",
			Handler:    _PageManagementService_RenderPage_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _PageManagementService_UpdatePage_Handler,
		},
		{
			MethodName: "UpdatePageContent",
			Handler:    _PageManagementService_UpdatePageContent_Handler,
		},
		{
			MethodName: "UpdateWholePage",
			Handler:    _PageManagementService_UpdateWholePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _PageManagementService_DeletePage_Handler,
		},
		{
			MethodName: "TogglePageLock",
			Handler:    _PageManagementService_TogglePageLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/page_management.proto",
}
