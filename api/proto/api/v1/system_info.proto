syntax = "proto3";

package api.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/brendanjerwin/simple_wiki/gen/go/api/v1;apiv1";

service SystemInfoService {
  // GetVersion returns the server version and build time.
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {}
  
  // GetJobStatus returns the current status of background job queues.
  rpc GetJobStatus(GetJobStatusRequest) returns (GetJobStatusResponse) {}
  
  // StreamJobStatus provides real-time streaming updates of job queue status.
  // The stream will automatically terminate when all queues are idle.
  rpc StreamJobStatus(StreamJobStatusRequest) returns (stream GetJobStatusResponse) {}
}

// The request message for the GetVersion RPC.
message GetVersionRequest {}

// The response message for the GetVersion RPC.
message GetVersionResponse {
  string commit = 1;
  google.protobuf.Timestamp build_time = 2;
}

// The request message for the GetJobStatus RPC.
message GetJobStatusRequest {}

// The request message for the StreamJobStatus RPC.
message StreamJobStatusRequest {
  // Optional: interval in milliseconds for updates (default: 1000ms)
  optional int32 update_interval_ms = 1;
}

// The response message for the GetJobStatus RPC.
message GetJobStatusResponse {
  repeated JobQueueStatus job_queues = 1;
}

// Status information for a single job queue.
message JobQueueStatus {
  string name = 1;             // "Frontmatter", "Bleve", "File Scan"
  int32 jobs_remaining = 2;    // Current queue depth
  int32 high_water_mark = 3;   // Peak, resets to 0 when empty
  bool is_active = 4;          // jobs_remaining > 0
}
