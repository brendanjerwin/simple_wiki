name: Go

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.24
      - name: Generate matrix
        id: generate
        run: go run ./tools/generate_matrix.go

  build-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.24
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Compile test binaries
        run: |
          mkdir -p test-binaries
          for pkg in $(go list -f '{{if .TestGoFiles}}{{.ImportPath}}{{end}}' ./... | grep -v vendor | grep -v /gen/); do
            go test -c -cover -o "test-binaries/$(echo $pkg | tr '/' '-').test" $pkg
          done
      - name: Upload test binaries
        uses: actions/upload-artifact@v4
        with:
          name: test-binaries
          path: test-binaries/

  test:
    runs-on: ubuntu-latest
    needs: [generate-matrix, build-tests]
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Download test binaries
        uses: actions/download-artifact@v4
        with:
          name: test-binaries
          path: test-binaries/
      - name: Test ${{ matrix.name }}
        run: |
          mkdir -p coverage_temp
          for pkg in ${{ join(matrix.packages, ' ') }}; do
            TEST_BINARY_NAME=$(echo $pkg | tr '/' '-')
            if [ -f "./test-binaries/$TEST_BINARY_NAME.test" ]; then
              chmod +x ./test-binaries/$TEST_BINARY_NAME.test
              ./test-binaries/$TEST_BINARY_NAME.test -test.coverprofile="coverage_temp/$TEST_BINARY_NAME.cover" &
            fi
          done
          wait
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.name }}
          path: coverage_temp

  combine_and_upload_coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.24
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
      - name: Combine coverage
        run: |
          echo "mode: set" > coverage.txt
          find coverage-artifacts -name "*.cover" -exec cat {} + | grep -v "mode: set" >> coverage.txt
      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.txt