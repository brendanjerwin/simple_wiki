// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: api/v1/page_management.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package api.v1;

@kotlin.jvm.JvmName("-initializecreatePageRequest")
public inline fun createPageRequest(block: api.v1.CreatePageRequestKt.Dsl.() -> kotlin.Unit): api.v1.PageManagement.CreatePageRequest =
  api.v1.CreatePageRequestKt.Dsl._create(api.v1.PageManagement.CreatePageRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * Create Page
 * ```
 *
 * Protobuf type `api.v1.CreatePageRequest`
 */
public object CreatePageRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: api.v1.PageManagement.CreatePageRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: api.v1.PageManagement.CreatePageRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): api.v1.PageManagement.CreatePageRequest = _builder.build()

    /**
     * `string page_name = 1 [json_name = "pageName"];`
     */
    public var pageName: kotlin.String
      @JvmName("getPageName")
      get() = _builder.pageName
      @JvmName("setPageName")
      set(value) {
        _builder.pageName = value
      }
    /**
     * `string page_name = 1 [json_name = "pageName"];`
     */
    public fun clearPageName() {
      _builder.clearPageName()
    }

    /**
     * `string content_markdown = 2 [json_name = "contentMarkdown"];`
     */
    public var contentMarkdown: kotlin.String
      @JvmName("getContentMarkdown")
      get() = _builder.contentMarkdown
      @JvmName("setContentMarkdown")
      set(value) {
        _builder.contentMarkdown = value
      }
    /**
     * `string content_markdown = 2 [json_name = "contentMarkdown"];`
     */
    public fun clearContentMarkdown() {
      _builder.clearContentMarkdown()
    }

    /**
     * `string front_matter_toml = 3 [json_name = "frontMatterToml"];`
     */
    public var frontMatterToml: kotlin.String
      @JvmName("getFrontMatterToml")
      get() = _builder.frontMatterToml
      @JvmName("setFrontMatterToml")
      set(value) {
        _builder.frontMatterToml = value
      }
    /**
     * `string front_matter_toml = 3 [json_name = "frontMatterToml"];`
     */
    public fun clearFrontMatterToml() {
      _builder.clearFrontMatterToml()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun api.v1.PageManagement.CreatePageRequest.copy(block: `api.v1`.CreatePageRequestKt.Dsl.() -> kotlin.Unit): api.v1.PageManagement.CreatePageRequest =
  `api.v1`.CreatePageRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

