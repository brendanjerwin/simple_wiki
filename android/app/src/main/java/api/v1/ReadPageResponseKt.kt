// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: api/v1/page_management.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package api.v1;

@kotlin.jvm.JvmName("-initializereadPageResponse")
public inline fun readPageResponse(block: api.v1.ReadPageResponseKt.Dsl.() -> kotlin.Unit): api.v1.PageManagement.ReadPageResponse =
  api.v1.ReadPageResponseKt.Dsl._create(api.v1.PageManagement.ReadPageResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `api.v1.ReadPageResponse`
 */
public object ReadPageResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: api.v1.PageManagement.ReadPageResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: api.v1.PageManagement.ReadPageResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): api.v1.PageManagement.ReadPageResponse = _builder.build()

    /**
     * `string content_markdown = 1 [json_name = "contentMarkdown"];`
     */
    public var contentMarkdown: kotlin.String
      @JvmName("getContentMarkdown")
      get() = _builder.contentMarkdown
      @JvmName("setContentMarkdown")
      set(value) {
        _builder.contentMarkdown = value
      }
    /**
     * `string content_markdown = 1 [json_name = "contentMarkdown"];`
     */
    public fun clearContentMarkdown() {
      _builder.clearContentMarkdown()
    }

    /**
     * `string front_matter_toml = 2 [json_name = "frontMatterToml"];`
     */
    public var frontMatterToml: kotlin.String
      @JvmName("getFrontMatterToml")
      get() = _builder.frontMatterToml
      @JvmName("setFrontMatterToml")
      set(value) {
        _builder.frontMatterToml = value
      }
    /**
     * `string front_matter_toml = 2 [json_name = "frontMatterToml"];`
     */
    public fun clearFrontMatterToml() {
      _builder.clearFrontMatterToml()
    }

    /**
     * `string rendered_content_html = 3 [json_name = "renderedContentHtml"];`
     */
    public var renderedContentHtml: kotlin.String
      @JvmName("getRenderedContentHtml")
      get() = _builder.renderedContentHtml
      @JvmName("setRenderedContentHtml")
      set(value) {
        _builder.renderedContentHtml = value
      }
    /**
     * `string rendered_content_html = 3 [json_name = "renderedContentHtml"];`
     */
    public fun clearRenderedContentHtml() {
      _builder.clearRenderedContentHtml()
    }

    /**
     * ```
     * rendered_content_markdown contains the markdown content after template expansion
     * but before HTML conversion. This is useful for LLM consumption as it provides
     * ~47% token savings compared to HTML while including all template-expanded content
     * like inventory lists from ShowInventoryContentsOf.
     * ```
     *
     * `string rendered_content_markdown = 4 [json_name = "renderedContentMarkdown"];`
     */
    public var renderedContentMarkdown: kotlin.String
      @JvmName("getRenderedContentMarkdown")
      get() = _builder.renderedContentMarkdown
      @JvmName("setRenderedContentMarkdown")
      set(value) {
        _builder.renderedContentMarkdown = value
      }
    /**
     * ```
     * rendered_content_markdown contains the markdown content after template expansion
     * but before HTML conversion. This is useful for LLM consumption as it provides
     * ~47% token savings compared to HTML while including all template-expanded content
     * like inventory lists from ShowInventoryContentsOf.
     * ```
     *
     * `string rendered_content_markdown = 4 [json_name = "renderedContentMarkdown"];`
     */
    public fun clearRenderedContentMarkdown() {
      _builder.clearRenderedContentMarkdown()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun api.v1.PageManagement.ReadPageResponse.copy(block: `api.v1`.ReadPageResponseKt.Dsl.() -> kotlin.Unit): api.v1.PageManagement.ReadPageResponse =
  `api.v1`.ReadPageResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

