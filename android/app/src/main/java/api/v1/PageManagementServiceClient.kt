// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: api/v1/page_management.proto
//
package api.v1

import com.connectrpc.Headers
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.StreamType

public class PageManagementServiceClient(
  private val client: ProtocolClientInterface,
) : PageManagementServiceClientInterface {
  override suspend fun createPage(request: PageManagement.CreatePageRequest, headers: Headers): ResponseMessage<PageManagement.CreatePageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.PageManagementService/CreatePage",
      api.v1.PageManagement.CreatePageRequest::class,
      api.v1.PageManagement.CreatePageResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun readPage(request: PageManagement.ReadPageRequest, headers: Headers): ResponseMessage<PageManagement.ReadPageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.PageManagementService/ReadPage",
      api.v1.PageManagement.ReadPageRequest::class,
      api.v1.PageManagement.ReadPageResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun renderPage(request: PageManagement.RenderPageRequest, headers: Headers): ResponseMessage<PageManagement.RenderPageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.PageManagementService/RenderPage",
      api.v1.PageManagement.RenderPageRequest::class,
      api.v1.PageManagement.RenderPageResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun updatePage(request: PageManagement.UpdatePageRequest, headers: Headers): ResponseMessage<PageManagement.UpdatePageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.PageManagementService/UpdatePage",
      api.v1.PageManagement.UpdatePageRequest::class,
      api.v1.PageManagement.UpdatePageResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun updatePageContent(request: PageManagement.UpdatePageContentRequest, headers: Headers): ResponseMessage<PageManagement.UpdatePageContentResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.PageManagementService/UpdatePageContent",
      api.v1.PageManagement.UpdatePageContentRequest::class,
      api.v1.PageManagement.UpdatePageContentResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun updateWholePage(request: PageManagement.UpdateWholePageRequest, headers: Headers): ResponseMessage<PageManagement.UpdateWholePageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.PageManagementService/UpdateWholePage",
      api.v1.PageManagement.UpdateWholePageRequest::class,
      api.v1.PageManagement.UpdateWholePageResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun deletePage(request: PageManagement.DeletePageRequest, headers: Headers): ResponseMessage<PageManagement.DeletePageResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.PageManagementService/DeletePage",
      api.v1.PageManagement.DeletePageRequest::class,
      api.v1.PageManagement.DeletePageResponse::class,
      StreamType.UNARY,
    ),
  )

}
