// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: api/v1/frontmatter.proto
//
package api.v1

import com.connectrpc.Headers
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.StreamType

/**
 *  The Frontmatter service definition.
 */
public class FrontmatterClient(
  private val client: ProtocolClientInterface,
) : FrontmatterClientInterface {
  /**
   *  Gets the frontmatter for a given page.
   */
  override suspend fun getFrontmatter(request: FrontmatterOuterClass.GetFrontmatterRequest, headers: Headers): ResponseMessage<FrontmatterOuterClass.GetFrontmatterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.Frontmatter/GetFrontmatter",
      api.v1.FrontmatterOuterClass.GetFrontmatterRequest::class,
      api.v1.FrontmatterOuterClass.GetFrontmatterResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Merges the given frontmatter with the existing frontmatter for a page.
   */
  override suspend fun mergeFrontmatter(request: FrontmatterOuterClass.MergeFrontmatterRequest, headers: Headers): ResponseMessage<FrontmatterOuterClass.MergeFrontmatterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.Frontmatter/MergeFrontmatter",
      api.v1.FrontmatterOuterClass.MergeFrontmatterRequest::class,
      api.v1.FrontmatterOuterClass.MergeFrontmatterResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Replaces the entire frontmatter for a given page.
   */
  override suspend fun replaceFrontmatter(request: FrontmatterOuterClass.ReplaceFrontmatterRequest, headers: Headers): ResponseMessage<FrontmatterOuterClass.ReplaceFrontmatterResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.Frontmatter/ReplaceFrontmatter",
      api.v1.FrontmatterOuterClass.ReplaceFrontmatterRequest::class,
      api.v1.FrontmatterOuterClass.ReplaceFrontmatterResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  Removes a key from the frontmatter at a given path.
   */
  override suspend fun removeKeyAtPath(request: FrontmatterOuterClass.RemoveKeyAtPathRequest, headers: Headers): ResponseMessage<FrontmatterOuterClass.RemoveKeyAtPathResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.Frontmatter/RemoveKeyAtPath",
      api.v1.FrontmatterOuterClass.RemoveKeyAtPathRequest::class,
      api.v1.FrontmatterOuterClass.RemoveKeyAtPathResponse::class,
      StreamType.UNARY,
    ),
  )

}
