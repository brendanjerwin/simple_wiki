// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: api/v1/system_info.proto
//
package api.v1

import com.connectrpc.Headers
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.ServerOnlyStreamInterface
import com.connectrpc.StreamType

public class SystemInfoServiceClient(
  private val client: ProtocolClientInterface,
) : SystemInfoServiceClientInterface {
  /**
   *  GetVersion returns the server version and build time.
   */
  override suspend fun getVersion(request: SystemInfo.GetVersionRequest, headers: Headers): ResponseMessage<SystemInfo.GetVersionResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.SystemInfoService/GetVersion",
      api.v1.SystemInfo.GetVersionRequest::class,
      api.v1.SystemInfo.GetVersionResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  GetJobStatus returns the current status of background job queues.
   */
  override suspend fun getJobStatus(request: SystemInfo.GetJobStatusRequest, headers: Headers): ResponseMessage<SystemInfo.GetJobStatusResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "api.v1.SystemInfoService/GetJobStatus",
      api.v1.SystemInfo.GetJobStatusRequest::class,
      api.v1.SystemInfo.GetJobStatusResponse::class,
      StreamType.UNARY,
    ),
  )


  /**
   *  StreamJobStatus provides real-time streaming updates of job queue status.
   *  The stream will automatically terminate when all queues are idle.
   */
  override suspend fun streamJobStatus(headers: Headers): ServerOnlyStreamInterface<SystemInfo.StreamJobStatusRequest, SystemInfo.GetJobStatusResponse> = client.serverStream(
    headers,
    MethodSpec(
    "api.v1.SystemInfoService/StreamJobStatus",
      api.v1.SystemInfo.StreamJobStatusRequest::class,
      api.v1.SystemInfo.GetJobStatusResponse::class,
      StreamType.SERVER,
    ),
  )

}
