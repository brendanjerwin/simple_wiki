// @generated by protoc-gen-es v2.6.0
// @generated from file api/v1/version.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * The request message for the GetVersion RPC.
 *
 * @generated from message api.v1.GetVersionRequest
 */
export class GetVersionRequest extends Message {
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }

  static runtime = proto3;
  static typeName = "api.v1.GetVersionRequest";
  static fields = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes, options) {
    return new GetVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue, options) {
    return new GetVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString, options) {
    return new GetVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a, b) {
    return proto3.util.equals(GetVersionRequest, a, b);
  }
}

/**
 * The response message for the GetVersion RPC.
 *
 * @generated from message api.v1.GetVersionResponse
 */
export class GetVersionResponse extends Message {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string commit = 2;
   */
  commit = "";

  /**
   * @generated from field: google.protobuf.Timestamp build_time = 3;
   */
  buildTime;

  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }

  static runtime = proto3;
  static typeName = "api.v1.GetVersionResponse";
  static fields = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "build_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes, options) {
    return new GetVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue, options) {
    return new GetVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString, options) {
    return new GetVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a, b) {
    return proto3.util.equals(GetVersionResponse, a, b);
  }
}