// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/search.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The request message for searching content.
 *
 * @generated from message api.v1.SearchContentRequest
 */
export class SearchContentRequest extends Message<SearchContentRequest> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<SearchContentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SearchContentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchContentRequest {
    return new SearchContentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchContentRequest {
    return new SearchContentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchContentRequest {
    return new SearchContentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchContentRequest | PlainMessage<SearchContentRequest> | undefined, b: SearchContentRequest | PlainMessage<SearchContentRequest> | undefined): boolean {
    return proto3.util.equals(SearchContentRequest, a, b);
  }
}

/**
 * The response message containing search results.
 *
 * @generated from message api.v1.SearchContentResponse
 */
export class SearchContentResponse extends Message<SearchContentResponse> {
  /**
   * @generated from field: repeated api.v1.SearchResult results = 1;
   */
  results: SearchResult[] = [];

  constructor(data?: PartialMessage<SearchContentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SearchContentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: SearchResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchContentResponse {
    return new SearchContentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchContentResponse {
    return new SearchContentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchContentResponse {
    return new SearchContentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchContentResponse | PlainMessage<SearchContentResponse> | undefined, b: SearchContentResponse | PlainMessage<SearchContentResponse> | undefined): boolean {
    return proto3.util.equals(SearchContentResponse, a, b);
  }
}

/**
 * A search result item.
 *
 * @generated from message api.v1.SearchResult
 */
export class SearchResult extends Message<SearchResult> {
  /**
   * Page identifier
   *
   * @generated from field: string identifier = 1;
   */
  identifier = "";

  /**
   * Page title
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * Plain text fragment (no HTML)
   *
   * @generated from field: string fragment = 3;
   */
  fragment = "";

  /**
   * Highlight positions
   *
   * @generated from field: repeated api.v1.HighlightSpan highlights = 4;
   */
  highlights: HighlightSpan[] = [];

  constructor(data?: PartialMessage<SearchResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SearchResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fragment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "highlights", kind: "message", T: HighlightSpan, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResult {
    return new SearchResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResult {
    return new SearchResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResult {
    return new SearchResult().fromJsonString(jsonString, options);
  }

  static equals(a: SearchResult | PlainMessage<SearchResult> | undefined, b: SearchResult | PlainMessage<SearchResult> | undefined): boolean {
    return proto3.util.equals(SearchResult, a, b);
  }
}

/**
 * A span of text to be highlighted.
 *
 * @generated from message api.v1.HighlightSpan
 */
export class HighlightSpan extends Message<HighlightSpan> {
  /**
   * Start position in fragment
   *
   * @generated from field: int32 start = 1;
   */
  start = 0;

  /**
   * End position in fragment  
   *
   * @generated from field: int32 end = 2;
   */
  end = 0;

  constructor(data?: PartialMessage<HighlightSpan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.HighlightSpan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HighlightSpan {
    return new HighlightSpan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HighlightSpan {
    return new HighlightSpan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HighlightSpan {
    return new HighlightSpan().fromJsonString(jsonString, options);
  }

  static equals(a: HighlightSpan | PlainMessage<HighlightSpan> | undefined, b: HighlightSpan | PlainMessage<HighlightSpan> | undefined): boolean {
    return proto3.util.equals(HighlightSpan, a, b);
  }
}

