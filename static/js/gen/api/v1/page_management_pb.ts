// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/page_management.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Create Page
 *
 * @generated from message api.v1.CreatePageRequest
 */
export class CreatePageRequest extends Message<CreatePageRequest> {
  /**
   * @generated from field: string page_name = 1;
   */
  pageName = "";

  /**
   * @generated from field: string content_markdown = 2;
   */
  contentMarkdown = "";

  /**
   * @generated from field: string front_matter_toml = 3;
   */
  frontMatterToml = "";

  constructor(data?: PartialMessage<CreatePageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreatePageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_markdown", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "front_matter_toml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePageRequest {
    return new CreatePageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePageRequest {
    return new CreatePageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePageRequest {
    return new CreatePageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePageRequest | PlainMessage<CreatePageRequest> | undefined, b: CreatePageRequest | PlainMessage<CreatePageRequest> | undefined): boolean {
    return proto3.util.equals(CreatePageRequest, a, b);
  }
}

/**
 * @generated from message api.v1.CreatePageResponse
 */
export class CreatePageResponse extends Message<CreatePageResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<CreatePageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreatePageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePageResponse {
    return new CreatePageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePageResponse {
    return new CreatePageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePageResponse {
    return new CreatePageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePageResponse | PlainMessage<CreatePageResponse> | undefined, b: CreatePageResponse | PlainMessage<CreatePageResponse> | undefined): boolean {
    return proto3.util.equals(CreatePageResponse, a, b);
  }
}

/**
 * Read Page
 *
 * @generated from message api.v1.ReadPageRequest
 */
export class ReadPageRequest extends Message<ReadPageRequest> {
  /**
   * @generated from field: string page_name = 1;
   */
  pageName = "";

  constructor(data?: PartialMessage<ReadPageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ReadPageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadPageRequest {
    return new ReadPageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadPageRequest {
    return new ReadPageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadPageRequest {
    return new ReadPageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadPageRequest | PlainMessage<ReadPageRequest> | undefined, b: ReadPageRequest | PlainMessage<ReadPageRequest> | undefined): boolean {
    return proto3.util.equals(ReadPageRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ReadPageResponse
 */
export class ReadPageResponse extends Message<ReadPageResponse> {
  /**
   * @generated from field: string content_markdown = 1;
   */
  contentMarkdown = "";

  /**
   * @generated from field: string front_matter_toml = 2;
   */
  frontMatterToml = "";

  /**
   * @generated from field: string rendered_content_html = 3;
   */
  renderedContentHtml = "";

  constructor(data?: PartialMessage<ReadPageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ReadPageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content_markdown", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "front_matter_toml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rendered_content_html", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadPageResponse {
    return new ReadPageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadPageResponse {
    return new ReadPageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadPageResponse {
    return new ReadPageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadPageResponse | PlainMessage<ReadPageResponse> | undefined, b: ReadPageResponse | PlainMessage<ReadPageResponse> | undefined): boolean {
    return proto3.util.equals(ReadPageResponse, a, b);
  }
}

/**
 * Render Page
 *
 * @generated from message api.v1.RenderPageRequest
 */
export class RenderPageRequest extends Message<RenderPageRequest> {
  /**
   * @generated from field: string page_name = 1;
   */
  pageName = "";

  constructor(data?: PartialMessage<RenderPageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.RenderPageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderPageRequest {
    return new RenderPageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderPageRequest {
    return new RenderPageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderPageRequest {
    return new RenderPageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenderPageRequest | PlainMessage<RenderPageRequest> | undefined, b: RenderPageRequest | PlainMessage<RenderPageRequest> | undefined): boolean {
    return proto3.util.equals(RenderPageRequest, a, b);
  }
}

/**
 * @generated from message api.v1.RenderPageResponse
 */
export class RenderPageResponse extends Message<RenderPageResponse> {
  /**
   * @generated from field: string rendered_content_html = 1;
   */
  renderedContentHtml = "";

  constructor(data?: PartialMessage<RenderPageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.RenderPageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rendered_content_html", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderPageResponse {
    return new RenderPageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderPageResponse {
    return new RenderPageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderPageResponse {
    return new RenderPageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenderPageResponse | PlainMessage<RenderPageResponse> | undefined, b: RenderPageResponse | PlainMessage<RenderPageResponse> | undefined): boolean {
    return proto3.util.equals(RenderPageResponse, a, b);
  }
}

/**
 * Update Page
 *
 * @generated from message api.v1.UpdatePageRequest
 */
export class UpdatePageRequest extends Message<UpdatePageRequest> {
  /**
   * @generated from field: string page_name = 1;
   */
  pageName = "";

  /**
   * @generated from field: string new_content_markdown = 2;
   */
  newContentMarkdown = "";

  /**
   * @generated from field: string new_front_matter_toml = 3;
   */
  newFrontMatterToml = "";

  constructor(data?: PartialMessage<UpdatePageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdatePageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_content_markdown", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_front_matter_toml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePageRequest {
    return new UpdatePageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePageRequest {
    return new UpdatePageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePageRequest {
    return new UpdatePageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePageRequest | PlainMessage<UpdatePageRequest> | undefined, b: UpdatePageRequest | PlainMessage<UpdatePageRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePageRequest, a, b);
  }
}

/**
 * @generated from message api.v1.UpdatePageResponse
 */
export class UpdatePageResponse extends Message<UpdatePageResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<UpdatePageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdatePageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePageResponse {
    return new UpdatePageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePageResponse {
    return new UpdatePageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePageResponse {
    return new UpdatePageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePageResponse | PlainMessage<UpdatePageResponse> | undefined, b: UpdatePageResponse | PlainMessage<UpdatePageResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePageResponse, a, b);
  }
}

/**
 * Update Page Content
 *
 * @generated from message api.v1.UpdatePageContentRequest
 */
export class UpdatePageContentRequest extends Message<UpdatePageContentRequest> {
  /**
   * @generated from field: string page_name = 1;
   */
  pageName = "";

  /**
   * @generated from field: string new_content_markdown = 2;
   */
  newContentMarkdown = "";

  constructor(data?: PartialMessage<UpdatePageContentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdatePageContentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_content_markdown", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePageContentRequest {
    return new UpdatePageContentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePageContentRequest {
    return new UpdatePageContentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePageContentRequest {
    return new UpdatePageContentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePageContentRequest | PlainMessage<UpdatePageContentRequest> | undefined, b: UpdatePageContentRequest | PlainMessage<UpdatePageContentRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePageContentRequest, a, b);
  }
}

/**
 * @generated from message api.v1.UpdatePageContentResponse
 */
export class UpdatePageContentResponse extends Message<UpdatePageContentResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<UpdatePageContentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdatePageContentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePageContentResponse {
    return new UpdatePageContentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePageContentResponse {
    return new UpdatePageContentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePageContentResponse {
    return new UpdatePageContentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePageContentResponse | PlainMessage<UpdatePageContentResponse> | undefined, b: UpdatePageContentResponse | PlainMessage<UpdatePageContentResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePageContentResponse, a, b);
  }
}

/**
 * Update Whole Page
 *
 * @generated from message api.v1.UpdateWholePageRequest
 */
export class UpdateWholePageRequest extends Message<UpdateWholePageRequest> {
  /**
   * @generated from field: string page_name = 1;
   */
  pageName = "";

  /**
   * Markdown including front matter
   *
   * @generated from field: string new_whole_markdown = 2;
   */
  newWholeMarkdown = "";

  constructor(data?: PartialMessage<UpdateWholePageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateWholePageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_whole_markdown", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWholePageRequest {
    return new UpdateWholePageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWholePageRequest {
    return new UpdateWholePageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWholePageRequest {
    return new UpdateWholePageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWholePageRequest | PlainMessage<UpdateWholePageRequest> | undefined, b: UpdateWholePageRequest | PlainMessage<UpdateWholePageRequest> | undefined): boolean {
    return proto3.util.equals(UpdateWholePageRequest, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateWholePageResponse
 */
export class UpdateWholePageResponse extends Message<UpdateWholePageResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<UpdateWholePageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateWholePageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWholePageResponse {
    return new UpdateWholePageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWholePageResponse {
    return new UpdateWholePageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWholePageResponse {
    return new UpdateWholePageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWholePageResponse | PlainMessage<UpdateWholePageResponse> | undefined, b: UpdateWholePageResponse | PlainMessage<UpdateWholePageResponse> | undefined): boolean {
    return proto3.util.equals(UpdateWholePageResponse, a, b);
  }
}

/**
 * Delete Page
 *
 * @generated from message api.v1.DeletePageRequest
 */
export class DeletePageRequest extends Message<DeletePageRequest> {
  /**
   * @generated from field: string page_name = 1;
   */
  pageName = "";

  constructor(data?: PartialMessage<DeletePageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeletePageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePageRequest {
    return new DeletePageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePageRequest {
    return new DeletePageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePageRequest {
    return new DeletePageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePageRequest | PlainMessage<DeletePageRequest> | undefined, b: DeletePageRequest | PlainMessage<DeletePageRequest> | undefined): boolean {
    return proto3.util.equals(DeletePageRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DeletePageResponse
 */
export class DeletePageResponse extends Message<DeletePageResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<DeletePageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeletePageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePageResponse {
    return new DeletePageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePageResponse {
    return new DeletePageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePageResponse {
    return new DeletePageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePageResponse | PlainMessage<DeletePageResponse> | undefined, b: DeletePageResponse | PlainMessage<DeletePageResponse> | undefined): boolean {
    return proto3.util.equals(DeletePageResponse, a, b);
  }
}

