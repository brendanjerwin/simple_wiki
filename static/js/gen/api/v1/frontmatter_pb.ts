// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/frontmatter.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * The request message containing the page name.
 *
 * @generated from message api.v1.GetFrontmatterRequest
 */
export class GetFrontmatterRequest extends Message<GetFrontmatterRequest> {
  /**
   * @generated from field: string page = 1;
   */
  page = "";

  constructor(data?: PartialMessage<GetFrontmatterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetFrontmatterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFrontmatterRequest {
    return new GetFrontmatterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFrontmatterRequest {
    return new GetFrontmatterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFrontmatterRequest {
    return new GetFrontmatterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFrontmatterRequest | PlainMessage<GetFrontmatterRequest> | undefined, b: GetFrontmatterRequest | PlainMessage<GetFrontmatterRequest> | undefined): boolean {
    return proto3.util.equals(GetFrontmatterRequest, a, b);
  }
}

/**
 * The response message containing the frontmatter.
 *
 * @generated from message api.v1.GetFrontmatterResponse
 */
export class GetFrontmatterResponse extends Message<GetFrontmatterResponse> {
  /**
   * google.protobuf.Struct is used to represent the frontmatter,
   * which is a map[string]any.
   *
   * @generated from field: google.protobuf.Struct frontmatter = 1;
   */
  frontmatter?: Struct;

  constructor(data?: PartialMessage<GetFrontmatterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetFrontmatterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frontmatter", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFrontmatterResponse {
    return new GetFrontmatterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFrontmatterResponse {
    return new GetFrontmatterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFrontmatterResponse {
    return new GetFrontmatterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFrontmatterResponse | PlainMessage<GetFrontmatterResponse> | undefined, b: GetFrontmatterResponse | PlainMessage<GetFrontmatterResponse> | undefined): boolean {
    return proto3.util.equals(GetFrontmatterResponse, a, b);
  }
}

/**
 * The request message for merging frontmatter.
 *
 * @generated from message api.v1.MergeFrontmatterRequest
 */
export class MergeFrontmatterRequest extends Message<MergeFrontmatterRequest> {
  /**
   * @generated from field: string page = 1;
   */
  page = "";

  /**
   * The frontmatter fields to merge.
   *
   * @generated from field: google.protobuf.Struct frontmatter = 2;
   */
  frontmatter?: Struct;

  constructor(data?: PartialMessage<MergeFrontmatterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MergeFrontmatterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "frontmatter", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MergeFrontmatterRequest {
    return new MergeFrontmatterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MergeFrontmatterRequest {
    return new MergeFrontmatterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MergeFrontmatterRequest {
    return new MergeFrontmatterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MergeFrontmatterRequest | PlainMessage<MergeFrontmatterRequest> | undefined, b: MergeFrontmatterRequest | PlainMessage<MergeFrontmatterRequest> | undefined): boolean {
    return proto3.util.equals(MergeFrontmatterRequest, a, b);
  }
}

/**
 * The response message for merging frontmatter.
 *
 * @generated from message api.v1.MergeFrontmatterResponse
 */
export class MergeFrontmatterResponse extends Message<MergeFrontmatterResponse> {
  /**
   * @generated from field: google.protobuf.Struct frontmatter = 1;
   */
  frontmatter?: Struct;

  constructor(data?: PartialMessage<MergeFrontmatterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MergeFrontmatterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frontmatter", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MergeFrontmatterResponse {
    return new MergeFrontmatterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MergeFrontmatterResponse {
    return new MergeFrontmatterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MergeFrontmatterResponse {
    return new MergeFrontmatterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MergeFrontmatterResponse | PlainMessage<MergeFrontmatterResponse> | undefined, b: MergeFrontmatterResponse | PlainMessage<MergeFrontmatterResponse> | undefined): boolean {
    return proto3.util.equals(MergeFrontmatterResponse, a, b);
  }
}

/**
 * A component of a path to a value in a nested structure. This allows
 * for structured traversal of JSON-like objects. For example, to access
 * the name of the first user in a structure like `{"users": [{"name": "John"}]}`,
 * the path would be `[PathComponent{key: "users"}, PathComponent{index: 0}, PathComponent{key: "name"}]`.
 *
 * @generated from message api.v1.PathComponent
 */
export class PathComponent extends Message<PathComponent> {
  /**
   * @generated from oneof api.v1.PathComponent.component
   */
  component: {
    /**
     * A key for a map/object.
     *
     * @generated from field: string key = 1;
     */
    value: string;
    case: "key";
  } | {
    /**
     * An index for an array/list.
     *
     * @generated from field: int32 index = 2;
     */
    value: number;
    case: "index";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PathComponent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PathComponent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "component" },
    { no: 2, name: "index", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "component" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathComponent {
    return new PathComponent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathComponent {
    return new PathComponent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathComponent {
    return new PathComponent().fromJsonString(jsonString, options);
  }

  static equals(a: PathComponent | PlainMessage<PathComponent> | undefined, b: PathComponent | PlainMessage<PathComponent> | undefined): boolean {
    return proto3.util.equals(PathComponent, a, b);
  }
}

/**
 * The request for removing a key at a path.
 *
 * @generated from message api.v1.RemoveKeyAtPathRequest
 */
export class RemoveKeyAtPathRequest extends Message<RemoveKeyAtPathRequest> {
  /**
   * @generated from field: string page = 1;
   */
  page = "";

  /**
   * The path to the key to remove.
   *
   * @generated from field: repeated api.v1.PathComponent key_path = 2;
   */
  keyPath: PathComponent[] = [];

  constructor(data?: PartialMessage<RemoveKeyAtPathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.RemoveKeyAtPathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_path", kind: "message", T: PathComponent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveKeyAtPathRequest {
    return new RemoveKeyAtPathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveKeyAtPathRequest {
    return new RemoveKeyAtPathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveKeyAtPathRequest {
    return new RemoveKeyAtPathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveKeyAtPathRequest | PlainMessage<RemoveKeyAtPathRequest> | undefined, b: RemoveKeyAtPathRequest | PlainMessage<RemoveKeyAtPathRequest> | undefined): boolean {
    return proto3.util.equals(RemoveKeyAtPathRequest, a, b);
  }
}

/**
 * The response for removing a key at a path.
 *
 * @generated from message api.v1.RemoveKeyAtPathResponse
 */
export class RemoveKeyAtPathResponse extends Message<RemoveKeyAtPathResponse> {
  /**
   * The updated frontmatter after removal.
   *
   * @generated from field: google.protobuf.Struct frontmatter = 1;
   */
  frontmatter?: Struct;

  constructor(data?: PartialMessage<RemoveKeyAtPathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.RemoveKeyAtPathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frontmatter", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveKeyAtPathResponse {
    return new RemoveKeyAtPathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveKeyAtPathResponse {
    return new RemoveKeyAtPathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveKeyAtPathResponse {
    return new RemoveKeyAtPathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveKeyAtPathResponse | PlainMessage<RemoveKeyAtPathResponse> | undefined, b: RemoveKeyAtPathResponse | PlainMessage<RemoveKeyAtPathResponse> | undefined): boolean {
    return proto3.util.equals(RemoveKeyAtPathResponse, a, b);
  }
}

/**
 * The request for replacing frontmatter.
 *
 * @generated from message api.v1.ReplaceFrontmatterRequest
 */
export class ReplaceFrontmatterRequest extends Message<ReplaceFrontmatterRequest> {
  /**
   * @generated from field: string page = 1;
   */
  page = "";

  /**
   * The full frontmatter to set for the page.
   *
   * @generated from field: google.protobuf.Struct frontmatter = 2;
   */
  frontmatter?: Struct;

  constructor(data?: PartialMessage<ReplaceFrontmatterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ReplaceFrontmatterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "frontmatter", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceFrontmatterRequest {
    return new ReplaceFrontmatterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceFrontmatterRequest {
    return new ReplaceFrontmatterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceFrontmatterRequest {
    return new ReplaceFrontmatterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceFrontmatterRequest | PlainMessage<ReplaceFrontmatterRequest> | undefined, b: ReplaceFrontmatterRequest | PlainMessage<ReplaceFrontmatterRequest> | undefined): boolean {
    return proto3.util.equals(ReplaceFrontmatterRequest, a, b);
  }
}

/**
 * The response for replacing frontmatter.
 *
 * @generated from message api.v1.ReplaceFrontmatterResponse
 */
export class ReplaceFrontmatterResponse extends Message<ReplaceFrontmatterResponse> {
  /**
   * The updated frontmatter.
   *
   * @generated from field: google.protobuf.Struct frontmatter = 1;
   */
  frontmatter?: Struct;

  constructor(data?: PartialMessage<ReplaceFrontmatterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ReplaceFrontmatterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frontmatter", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceFrontmatterResponse {
    return new ReplaceFrontmatterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceFrontmatterResponse {
    return new ReplaceFrontmatterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceFrontmatterResponse {
    return new ReplaceFrontmatterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceFrontmatterResponse | PlainMessage<ReplaceFrontmatterResponse> | undefined, b: ReplaceFrontmatterResponse | PlainMessage<ReplaceFrontmatterResponse> | undefined): boolean {
    return proto3.util.equals(ReplaceFrontmatterResponse, a, b);
  }
}

